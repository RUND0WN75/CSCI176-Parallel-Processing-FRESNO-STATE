Shared-memory programming with Pthreads.

Implement the cost optimal parallel prefix computation model with PThread.

In the global area, define a 1-D array of doubles (please use size 500000017);
the computed prefix sums should be stored in each position in this array, i.e., the array is 
updated.

Initialize the array elements with index+1 value each, i.e., array[i] = i+1;

In the first stage, each thread is responsible for computing prefix sums in the subarray 
assigned and updating the subarray with the prefix sum values.

Subarray assignment (scheduling) methodology is the same as the one used in the 
previous programming assignment, i.e., computing the first and the last indexes.

In the second stage, prefix sum computation should be done with the highest index entry 
of each subarray.

This stage needs a good synchronization mechanism and the suggested synchronization 
tool is semaphore – mutex does not work for this.

In the third stage, each thread_i (except the first thread) is responsible for adding 
thread_i-1’s highest index prefix_sum value to each element in the subarray.
 
Run and Submission:
Please display the following selected prefix sum values only:
 prefix_sum[0] = 
 prefix_sum[1,000,000] = 
 prefix_sum[10,000,000] = 
 prefix_sum[100,000,000] = 
 prefix_sum[200,000,000] = 
 prefix_sum[300,000,000] = 
 prefix_sum[400,000,000] = 
 prefix_sum[500,000,016] = 

Your program should also display the first and the last indexes assigned to each thread.

Run your program with number of threads = 1, 2, 4, 8 and check/show the execution time for 
each run.
