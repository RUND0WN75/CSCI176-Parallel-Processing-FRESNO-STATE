Parallel merge sort with OpenMP.
Consider the merge sort algorithm that you studied in data structures/algorithm course(s). 
For a given problem size n, each thread is assigned a local list of n/p elements.
In this version of parallel merge sort, each thread performs ‘qsort’ (GNU library quicksort) to 
sort the local list instead of implementing the recursion-based method.
Merging step is a tree reduction, e.g., thread_0 merges locally sorted lists from thread_0 and 
thread_1, thread_2 merges locally sorted lists from thread_2 and thread_3, and so on. 
Eventually, thread_0 produces the final globally sorted list.
A more detailed guide is shown below.

Programming guide -----------------------------------------------------------------------------------------
1. Access command line arguments for n (total number of elements in the list) and p (total number of
 threads); create a list (dynamic array) of n integers; initialize the list with random numbers – each 
 random number should be less than or equal to n, and it is suggested to use ‘parallel for’ construct. 
2. Time checking starts at this point; please use ‘omp_get_wtime()’ that OpenMP supports.
3. Launch multiple threads; in each thread, create a local list of size n/p, copy list[my_start ~ my_end] to 
 the local list, and perform qsort (GNU library quicksort); each thread is responsible for updating the 
 global list with the sorted local list. It is suggested to use ‘parallel for’ construct for local list copy steps.
4. Merging steps need a while loop, which you practiced in HW1; pseudo-code is shown below:
 divisor = 2; core-difference = 1;
 while (divisor <= thread_count)
 { //use barrier synchronization here;
 //determine whether this thread is sender or receiver;
 //if receiver, perform merging operation by calling merge(..) function;
 //there is nothing to do for a sender;
 divisor *= 2; core_difference *= 2;
 }
 Merge(..) function should be defined separately; one suggested idea is that the function should update
 the global list with the merged result.
5. Time checking ends at this point; please use ‘omp_get_wtime()’ that OpenMP supports.
6. Finally, please make a function to check whether the final list is completely sorted or not.
 This function is easy to define, i.e., using a for loop (i=0 ~ n-1), check and detect (list[i] > list[i+1]).
